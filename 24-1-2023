//postorder traversal

/**

 * Definition for a binary tree node.

 * public class TreeNode {

 *     int val;

 *     TreeNode left;

 *     TreeNode right;

 *     TreeNode() {}

 *     TreeNode(int val) { this.val = val; }

 *     TreeNode(int val, TreeNode left, TreeNode right) {

 *         this.val = val;

 *         this.left = left;

 *         this.right = right;

 *     }

 * }

 */

class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {

        ArrayList<Integer> result = new ArrayList<>();

        postOrder(root,result);

        return result;

    }

    public void postOrder(TreeNode root, ArrayList<Integer> result){

        if(root==null){

            return;  

        }

        //recursively call postOrder on the left subtree

        postOrder(root.left,result); 

        //recursively call postOrder on the right subtree

        postOrder(root.right,result); 

        //add the current node's value to the result list

        result.add(root.val); 

    }

}

//preorder traversal

/**

 * Definition for a binary tree node.

 * public class TreeNode {

 *     int val;

 *     TreeNode left;

 *     TreeNode right;

 *     TreeNode() {}

 *     TreeNode(int val) { this.val = val; }

 *     TreeNode(int val, TreeNode left, TreeNode right) {

 *         this.val = val;

 *         this.left = left;

 *         this.right = right;

 *     }

 * }

 */

class Solution {

    public List<Integer> preorderTraversal(TreeNode root) {

      ArrayList<Integer> arr = new ArrayList<>();

        preorderTraversal(root,arr);

        return arr;

    }

    void  preorderTraversal(TreeNode root , ArrayList<Integer> arr){

        if(root == null){

            return;

        }

        arr.add(root.val);

         preorderTraversal(root.left,arr);

          preorderTraversal(root.right,arr);

    }

}

//in order traversal

/**

 * Definition for a binary tree node.

 * public class TreeNode {

 *     int val;

 *     TreeNode left;

 *     TreeNode right;

 *     TreeNode() {}

 *     TreeNode(int val) { this.val = val; }

 *     TreeNode(int val, TreeNode left, TreeNode right) {

 *         this.val = val;

 *         this.left = left;

 *         this.right = right;

 *     }

 * }

 */

class Solution {

    public List<Integer> inorderTraversal(TreeNode root) {

       ArrayList<Integer> arr = new ArrayList<>();

        inorderTraversal(root,arr);

        return arr;

    }

    void inorderTraversal(TreeNode root , ArrayList<Integer> arr){

        if(root == null){

            return;

        }

        inorderTraversal(root.left,arr);

        arr.add(root.val);

        inorderTraversal(root.right,arr);

    } 

}

//issametree

/**

 * Definition for a binary tree node.

 * public class TreeNode {

 *     int val;

 *     TreeNode left;

 *     TreeNode right;

 *     TreeNode() {}

 *     TreeNode(int val) { this.val = val; }

 *     TreeNode(int val, TreeNode left, TreeNode right) {

 *         this.val = val;

 *         this.left = left;

 *         this.right = right;

 *     }

 * }

 */

class Solution {

    int f=1;

    public void post(TreeNode p,TreeNode q){

        if(p==null && q==null){return ;}

        if(p==null && q!=null){

            f=0;

            return;

        }

        if(p!=null && q==null){

            f=0;

            return;

        }

            post(p.left,q.left);

            post(p.right,q.right);

            System.out.println(p.val);

                        System.out.println(q.val);

            if(p.val!=q.val){

                f=0;

            }

    }

    public boolean isSameTree(TreeNode p, TreeNode q) {

        post(p,q);

        if(f==0){

            return false;

        }

        else{

            return true;

        }

    }

}

//is symmetric

/**

 * Definition for a binary tree node.

 * public class TreeNode {

 *     int val;

 *     TreeNode left;

 *     TreeNode right;

 *     TreeNode() {}

 *     TreeNode(int val) { this.val = val; }

 *     TreeNode(int val, TreeNode left, TreeNode right) {

 *         this.val = val;

 *         this.left = left;

 *         this.right = right;

 *     }

 * }

 */

class Solution {

    int f=1;

    public void post(TreeNode p,TreeNode q){

        if(p==null && q==null){return ;}

        if(p==null && q!=null){

            f=0;

            return;

        }

        if(p!=null && q==null){

            f=0;

            return;

        }

            post(p.left,q.right);

            post(p.right,q.left);

            System.out.println(p.val);

                        System.out.println(q.val);

            if(p.val!=q.val){

                f=0;

            }

    }

    

    public boolean isSymmetric(TreeNode root) {

        post(root.left,root.right);

        if(f==1){

            return true;

        }

        else{

            return false;

        }

    }

}
